#!/usr/bin/env bash

set -xv
# The goal of this script is to take a directory and install
# all the fonts inside.
# On top of this the script should be able to do this silently
# or verbose. Also the script should be able to keep or delete
# the original file.
#
# Syntax should look like this in the end:
# addfont [flags] directory
current_path="$1"
name=$(basename $current_path)
original_type='' # Possible original_types: archive, directory, file
supported_formats=('ttf' 'otf') # TODO: Add woff
font_formats=('ttf' 'otf' 'woff')

is_command() {
    command -v "$1" >/dev/null
}

install_woff_converter() {
    git clone https://github.com/bramstein/sfnt2woff-zopfli.git woff &&
    cd woff &&
    make &&
    chmod 755 woff2sfnt-zopfli sfnt2woff-zopfli &&
    mv woff2sfnt-zopfli sfnt2woff-zopfli /usr/local/bin &&
    cd .. &&
    rm -rf ./woff

    if ! is_command woff2sfnt-zopfli; then
        echo "Couldn't install woff converter"
        exit 126
    fi
}

is_font() {
    local file_format="${name##*.}"
    for supported_format in "${font_formats[@]}"; do
        if [[ $supported_format = $file_format ]]; then
            original_type='file'
            return 0
        fi
    done
    return 1
}

add_font() {
    local font_directory=~/Library/Fonts/
    local file_name=$(basename $1)
    local font_name="${file_name%.*}"
    local font_format="${file_name##*.}"
    if [[ $font_format = 'woff' ]]; then
        if ! is_command woff2sfnt-zopfli; then
            install_woff_converter
        fi
        local font_in_ttf="$font_name.ttf"
        woff2sfnt-zopfli $1 >> $font_in_ttf
        mv $font_in_ttf $font_directory
    else
        cp -n $1 $font_directory
        if [[ $? -eq 0 ]]; then
            echo "Successfully installed $file_name."
        else
            echo "$file_name is already installed."
        fi
    fi
}

add_fonts() {
    find_fonts_in_directory | while read font
    do
        add_font $font
    done
}

clean_up() {
    [[ $original_type = 'archive' ]] &&  rm -rf $current_path
}

find_fonts_in_directory() {
    find $current_path -type f \( -iname "*.[ot]tf" -o -iname "*.woff" \)
}

extract_from_archive() {
    # Creates a folder that we need to delete in the end.
    case $current_path in
        *.tar|*.tgz) tar -xzf "$current_path";;
        *.gzip) gunzip -k "$current_path";;
        *.zip) unzip -qq "$current_path";;
    esac
    
    name="${name%.*}"
    current_path="$PWD/$name"
    original_type='archive'
    main $current_path
    # TODO: Find a better way to get the returned file/directory's path
    #       This right now only works for directories
}

main() {
    if [[ -d "$1" ]]; then
        [[ -z $original_type ]] && original_type='directory' 
    elif [[ -f "$1" ]]; then
        if is_font; then
            add_font $current_path
            exit 0
        else
            extract_from_archive
            exit 0
        fi
    else 
        echo "The path you've entered is not valid: $1"
        exit 128
    fi
    add_fonts
    clean_up
}

main $1 

